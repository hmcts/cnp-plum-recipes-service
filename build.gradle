plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.14.RELEASE'
  id 'org.flywaydb.flyway' version '9.22.0'
  id 'org.springframework.boot' version '3.1.3'
  id 'org.owasp.dependencycheck' version '8.4.0'
  id 'com.github.ben-manes.versions' version '0.47.0'
  id 'se.patrikerdes.use-latest-versions' version '0.2.18'
  id 'org.sonarqube' version '4.3.1.3277'
  id 'io.gatling.gradle' version '3.9.5.5'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

pmd {
  toolVersion = "6.24.0"
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

checkstyle {
  toolVersion = '10.12.3'
  configFile = new File(rootDir, "checkstyle.xml")
  maxWarnings = 0
}

ext {
  lombokVersion = '1.18.28'
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "pmd",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

def springBootVersion = springBoot.class.package.implementationVersion
def springfoxSwagger = '3.0.0'
def javaLoggingVersion = '5.1.9'

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group in ['org.apache.tomcat.embed']) {
        details.useVersion '9.0.80'
      }

      if (details.requested.name in ['jaxb-osgi']) {
        details.useVersion '2.3.3'
      }

      if (details.requested.group == 'org.codehaus.groovy') {
        details.useVersion "3.0.2"
        details.because "needed by rest-assured>=4.3"
      }
    }
  }
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.6.0'
  implementation group: 'org.flywaydb', name: 'flyway-core', version: '9.22.0'

  implementation group: 'com.google.guava', name: 'guava', version: '32.1.2-jre'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.7.0'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'

  compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation group: 'io.rest-assured', name: 'rest-assured'
  testImplementation group: 'com.typesafe', name: 'config', version: '1.4.2'
}

mainClassName = 'uk.gov.hmcts.reform.rhubarb.recipes.Application'

bootJar {
  archiveFileName = 'moj-rhubarb-recipes-service.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

sourceSets {
  test {
    java.srcDir 'src/test/java'
  }
  functional {
    java.srcDir 'src/test/functional/java'
    resources.srcDir 'src/test/resources'
    compileClasspath += main.output + test.output
    runtimeClasspath += main.output + test.output
  }
  apiGateway {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir 'src/test/gateway/java'
    }

    resources.srcDir 'src/test/gateway/resources'
  }
}

configurations {
  functionalImplementation.extendsFrom testImplementation
  functionalRuntime.extendsFrom testRuntime
  apiGatewayImplementation.extendsFrom testImplementation
  apiGatewayRuntime.extendsFrom testRuntime
}

task highLevelDataSetup {}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functional.output.classesDirs
  classpath = sourceSets.functional.runtimeClasspath

  useJUnit {
    includeCategories 'uk.gov.hmcts.reform.rhubarb.functional.SmokeTest'
  }
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functional.output.classesDirs
  classpath = sourceSets.functional.runtimeClasspath
}

task apiGateway(type: Test, description: 'Runs the smoke tests for API gateway.', group: 'Verification') {
  testClassesDirs = sourceSets.apiGateway.output.classesDirs
  classpath = sourceSets.apiGateway.runtimeClasspath
}

sonarqube {
  properties {
    property "sonar.projectName", "cnp-plum-recipes-service"
    property "sonar.projectKey", "cnp-plum-recipes-service"
    property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
    property "sonar.coverage.exclusions", "**/config/**, **Exception**"
  }
}

test {
  useJUnitPlatform()
}

tasks.withType(Test) {
  useJUnitPlatform()
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

